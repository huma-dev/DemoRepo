<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NAte's code  
//show_message("Nate's code");
conversationCount = 0 ;
pos2 = 0;
numOfChar2=0;
stopConv = false;
 lectureContent = scr_getLecFromFile();

//show_message(lectureContent[1]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*lectureContent  = getLecture("lecture1");
show_message(lectureContent);

var str;
str = "lecture1"
get[0] = http_post_string("https://gmdemoapp.firebaseio.com/lecture1/slide1", "null");


if ds_map_find_value(async_load, "id") == get[0]
    {
    if ds_map_find_value(async_load, "status") &gt;= 0
       {
       r_str = ds_map_find_value(async_load, "result");
      show_message(r_str);
        }
    else
       {
       r_str = "null";
        show_message("r_str");
       }
    }
    */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  ///Nate's code  
draw_set_color(c_black);
if (!objControl_AdmiralRoom.stopConv)
{


//FleetOverView
//a[0]= rmFleetOverView_Instructor_statement1;
a[0] = "C is a programming language developed in the 1970's alongside the UNIX operating system. #"
a[1]= "C provides a comprehensive set of features for handling a wide variety of applications
";
a[2] = " such as systems development and scientific computation. #"
a[3]= "C++ is an “extension” of the C language, in that most C programs are also C++ programs.
" ;
a[4] = "C++, as opposed to C, supports “object-oriented programming.”
";
a[5] = "C++ keywords  #Keywords appear in blue in Visual C++.        
"
a[6] ="#Each keyword has a predefined purpose in the language. #"
a[7] = "#Do not use keywords as variable and constant names!!#"

a[8] = "#bool, break, case, char, const, continue, while.";
a[9] = "Programming Style#     C++ is a free-format language, which means that:
#Code can be indented in any way. 
";
a[10] = "Extra blanks (spaces) or tabs before or after identifiers/operators are ignored. 
"
a[11] ="#Blank lines are ignored by the compiler just like comments. #"
a[12] = "#There can be more than one statement on a single line.#"

a[13] = "#A single statement can continue over several lines.";
a[14] = "Click to wacth video";
var cstr;
var numOfSlides = array_length_1d(global.lectureText);
if (conversationCount &lt;= 14)
{
numOfChar2 = 0;

if (objControl_AdmiralRoom.nextStatement == true)
{
pos2=0;
objControl_AdmiralRoom.nextStatement = false;
conversationCount += 1;
}
i = conversationCount;
//msg = string(global.lectureText[i]);
msg = string(a[i]);
cstr=string_copy(msg,1,pos2);
pos2+=0.5;
draw_text_ext(x,y, cstr,23, 250);

 totalChar = string_length(msg);
 numOfChar2 = string_length(cstr);
        if(numOfChar2 == totalChar)
        {
        objNate.image_speed  = 0;
        }
        else
        { 
         objNate.image_speed = 0.2;    
        }
}
else {
objControl_AdmiralRoom.stopConv = true;
draw_text_ext(x,y, "Click to watch video and earn points",23, 250);
//show_message("open Video");
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>124,124</point>
  </PhysicsShapePoints>
</object>
