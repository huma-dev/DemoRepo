<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NAte's code  
//show_message("Nate's code");
conversationCount = 0 ;
pos2 = 0;
numOfChar2=0;
stopConv = false;
// lectureContent = scr_getLecture("lecture1");

//show_message(lectureContent[1]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(lectureContent)
{
show_message("lec is here");
// draw the text

}

else 

{
// wait for content to come.

}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*lectureContent  = getLecture("lecture1");
show_message(lectureContent);

var str;
str = "lecture1"
get[0] = http_post_string("https://gmdemoapp.firebaseio.com/lecture1/slide1", "null");


if ds_map_find_value(async_load, "id") == get[0]
    {
    if ds_map_find_value(async_load, "status") &gt;= 0
       {
       r_str = ds_map_find_value(async_load, "result");
      show_message(r_str);
        }
    else
       {
       r_str = "null";
        show_message("r_str");
       }
    }
    */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  ///Nate's code  
draw_set_color(c_black);
if (!objControl_AdmiralRoom.stopConv)
{


//FleetOverView
//a[0]= rmFleetOverView_Instructor_statement1;
a[0] = "C++ identifiers#";
a[1]= "Identifiers appear in black in Visual C++.
#";
a[2] = "An identifier is a name for a variable, constant, function, etc. 

#"
a[3]= "It consists of a letter followed by any sequence of letters, digits, and underscores. 
#" ;
a[4] = "Examples of valid identifiers: First_name, age,  y2000,  y2k
#";
a[5]= "Examples of invalid identifiers: 2000y
";
a[6]= "Identifiers cannot have special characters in them.# For example:  X=Y, J-20, ~Ricky,*Michael#  are invalid identifiers. 

#";
a[7]= "Identifiers are case-sensitive.#  For example: # Hello, hello, #WHOAMI, WhoAmI, whoami #are unique identifiers. 
";
a[8]= "C++ comments#Comments appear in green in Visual C++.
#";
a[9]= "Comments are explanatory notes; they are ignored by the compiler.
#";
a[10] = "#There are two ways to include comments in a program: #
// A double slash marks the start of a //single line comment.  
";
a[11]= "#/* A slash followed by an asterisk marks the start of a multiple line comment. It ends with an asterisk followed by a slash. */
#";
a[12]= "What makes a bad program?##Writing Code without detailed analysis and design
";
a[13]= "Repeating trial and error without understanding the problem#
#Writing tricky and dirty programs#";
a[14] = "Click to wacth video";
var cstr;
var numOfSlides = array_length_1d(global.lectureText);
if (conversationCount &lt;= 14)
{
numOfChar2 = 0;

if (objControl_AdmiralRoom.nextStatement == true)
{
pos2=0;
objControl_AdmiralRoom.nextStatement = false;
conversationCount += 1;
}
i = conversationCount;
//msg = string(global.lectureText[i]);
msg = string(a[i]);
cstr=string_copy(msg,1,pos2);
pos2+=0.5;
draw_text_ext(x,y, cstr,23, 250);

 totalChar = string_length(msg);
 numOfChar2 = string_length(cstr);
        if(numOfChar2 == totalChar)
        {
        obj_AdmiralKevin.image_speed  = 0;
        }
        else
        { 
         obj_AdmiralKevin.image_speed = 0.2;    
        }
}
else {
objControl_AdmiralRoom.stopConv = true;
draw_text_ext(x,y, "Click to watch video and earn points",23, 250);
//show_message("open Video");
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
